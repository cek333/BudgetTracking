const { createSlice, createAsyncThunk } = require('@reduxjs/toolkit');
const reportOrm = require('../../orm/reportOrm');
const { currencyRound } = require('../../util/mathUtil');

const fetchReport = createAsyncThunk(
  'report/fetch',
  async ({ acc, startDate, endDate, type }) => {
    const result = await reportOrm.getReport(acc, startDate, endDate, type);
    let data;
    if (type === 0) { // raw
      // Add balance info
      let bal = 0;
      const rawRep = result.map(tr => {
        bal = currencyRound(tr.amount + bal);
        return { ...tr, balance: bal };
      });
      data = rawRep;
    } else {
      const balIn = { data: [], total: 0 };
      const balOut = { data: [], total: 0 };
      for (let idx = 0; idx < result.length; idx++) {
        const grpSum = result[idx];
        if (grpSum.sum > 0) {
          balIn.data.push(grpSum);
          balIn.total = currencyRound(grpSum.sum + balIn.total);
        } else {
          balOut.data.push(grpSum);
          balOut.total = currencyRound(grpSum.sum + balOut.total);
        }
      }
      data = {
        income: {
          data: balIn.data,
          total: balIn.total
        },
        expenditures: {
          data: balOut.data,
          total: balOut.total
        }
      };
    }
    return { data, type };
  }
);

const initialState = {
  error: '',
  data: [],
  type: 0
};

function isRejectedAction(action) {
  return action.type.endsWith('rejected');
}

const reportSlice = createSlice({
  name: 'report',
  initialState,
  reducers: {
    setError: (state, action) => {
      state.error = action.payload;
    }
  },
  // Add logic for reducer actions generated by createAsyncThunk
  extraReducers: (builder) => {
    builder
      .addCase(fetchReport.fulfilled, (state, action) => {
        state.error = '';
        state.data = action.payload.data;
        state.type = action.payload.type;
      })
      .addMatcher(isRejectedAction, (state, action) => {
        // Handle all rejected actions
        state.error = `ERROR: ${action.error.message}`;
      });
  }
});

const { setError } = reportSlice.actions;

module.exports = {
  // async thunks
  fetchReport,
  // (sync) actions
  setError,
  // reducer
  reducer: reportSlice.reducer
};
